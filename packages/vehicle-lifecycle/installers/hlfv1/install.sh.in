ME=`basename "$0"`
if [ "${ME}" = "install-hlfv1-{{ENV}}.sh" ]; then
  echo "Please re-run as >   cat install-hlfv1-{{ENV}}.sh | bash"
  exit 1
fi
(cat > composer.sh; chmod +x composer.sh; exec bash composer.sh)
#!/bin/bash
set -ev

# Docker stop function
function stop()
{
P1=$(docker ps -q)
if [ "${P1}" != "" ]; then
  echo "Killing all running containers"  &2> /dev/null
  docker kill ${P1}
fi

P2=$(docker ps -aq)
if [ "${P2}" != "" ]; then
  echo "Removing all containers"  &2> /dev/null
  docker rm ${P2} -f
fi
}

if [ "$1" == "stop" ]; then
 echo "Stopping all Docker containers" >&2
 stop
 exit 0
fi

# Get the current directory.
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Get the full path to this script.
SOURCE="${DIR}/composer.sh"

# Create a work directory for extracting files into.
WORKDIR="$(pwd)/composer-data-{{ENV}}"
rm -rf "${WORKDIR}" && mkdir -p "${WORKDIR}"
cd "${WORKDIR}"

# Find the PAYLOAD: marker in this script.
PAYLOAD_LINE=$(grep -a -n '^PAYLOAD:$' "${SOURCE}" | cut -d ':' -f 1)
echo PAYLOAD_LINE=${PAYLOAD_LINE}

# Find and extract the payload in this script.
PAYLOAD_START=$((PAYLOAD_LINE + 1))
echo PAYLOAD_START=${PAYLOAD_START}
tail -n +${PAYLOAD_START} "${SOURCE}" | tar -xzf -

# Ensure sensible permissions on the extracted files.
find . -type d | xargs chmod a+rx
find . -type f | xargs chmod a+r

# Pull the latest versions of all the Docker images.
docker pull gmoney23/alpineplay:0.16.6
docker pull gmoney23/alpinecli:0.16.6
docker pull gmoney23/alpinerest:0.16.6
docker pull gmoney23/dmv
docker pull gmoney23/manufacturing
docker pull gmoney23/car-builder
docker pull gmoney23/insurance
docker pull gmoney23/node-red-composer:0.10

# stop all the docker containers
stop

# Stop insurance app if there from previous running
if [ $(lsof -t -i:4200) ]
then
        kill $(lsof -t -i:4200)
else
        echo "Clean Slate"
fi

# run the fabric-dev-scripts to get a running fabric
export FABRIC_VERSION=hlfv1
./fabric-dev-servers/downloadFabric.sh
./fabric-dev-servers/startFabric.sh

# Create a card store on the local file system to be shared by the demo
rm -fr $(pwd)/.vld-card-store
mkdir $(pwd)/.vld-card-store
chmod 777 $(pwd)/.vld-card-store

# Create the environment variables and file with the connection profile in.
rm -fr $(pwd)/vldstage
mkdir $(pwd)/vldstage
chmod 777 $(pwd)/vldstage
echo '{
  "type": "hlfv1",
  "name": "hlfv1",
  "orderers": [
    {
      "url": "grpc://orderer.example.com:7050"
    }
  ],
  "ca": {
    "url": "http://ca.org1.example.com:7054",
    "name": "ca.org1.example.com"
  },
  "peers": [
    {
      "requestURL": "grpc://peer0.org1.example.com:7051",
      "eventURL": "grpc://peer0.org1.example.com:7053"
    }
  ],
  "channel": "composerchannel",
  "mspID": "Org1MSP",
  "timeout": "300"
}' > $(pwd)/vldstage/connection.json

# Build the PeerAdmin card and import it
docker run \
  --rm \
  --network composer_default \
  -v $(pwd)/.vld-card-store:/home/composer/.composer \
  -v $(pwd)/vldstage:/home/composer/vldstage \
  -v $(pwd)/fabric-dev-servers/fabric-scripts/hlfv1/composer/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp:/home/composer/PeerAdmin \
  gmoney23/alpinecli:0.16.6 \
  card create -p vldstage/connection.json -u PeerAdmin -r PeerAdmin -r ChannelAdmin -f /home/composer/vldstage/PeerAdmin.card -c PeerAdmin/signcerts/Admin@org1.example.com-cert.pem -k PeerAdmin/keystore/114aab0e76bf0c78308f89efc4b8c9423e31568da0c340ca187a9b17aa9a4457_sk

docker run \
  --rm \
  --network composer_default \
  -v $(pwd)/.vld-card-store:/home/composer/.composer \
  -v $(pwd)/vldstage:/home/composer/vldstage \
  -v $(pwd)/fabric-dev-servers/fabric-scripts/hlfv1/composer/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp:/home/composer/PeerAdmin \
  gmoney23/alpinecli:0.16.6 \
  card import -f /home/composer/vldstage/PeerAdmin.card

# Start the playground.
docker run \
  -d \
  --network composer_default \
  --name composer \
  -v $(pwd)/.vld-card-store:/home/composer/.composer \
  -p 8080:8080 \
  gmoney23/alpineplay:0.16.6

# Deploy the business network archive.
#docker run \
#  --rm \
#  --network composer_default \
#  -v $(pwd)/vehicle-lifecycle-network.bna:/home/composer/vehicle-lifecycle-network.bna \
#  -v $(pwd)/vldstage:/home/composer/vldstage \
#  -v $(pwd)/.vld-card-store:/home/composer/.composer \
#  gmoney23/alpinecli:0.16.6 \
#  network deploy -c PeerAdmin@hlfv1 -a vehicle-lifecycle-network.bna -A admin -S adminpw -f /home/composer/vldstage/bnaadmin.card
#Deploy the business network archive.
docker run \
  --rm \
  --network composer_default \
  -v $(pwd)/vehicle-lifecycle-network.bna:/home/composer/vehicle-lifecycle-network.bna \
  -v $(pwd)/vldstage:/home/composer/vldstage \
  -v $(pwd)/.vld-card-store:/home/composer/.composer \
  gmoney23/alpinecli:0.16.6 \
  runtime install -c PeerAdmin@hlfv1 -n vehicle-lifecycle-network
#Deploy the business network archive.
docker run \
  --rm \
  --network composer_default \
  -v $(pwd)/vehicle-lifecycle-network.bna:/home/composer/vehicle-lifecycle-network.bna \
  -v $(pwd)/vldstage:/home/composer/vldstage \
  -v $(pwd)/.vld-card-store:/home/composer/.composer \
  gmoney23/alpinecli:0.16.6 \
  network start -c PeerAdmin@hlfv1 -A admin -S adminpw -a vehicle-lifecycle-network.bna -f /home/composer/vldstage/bnaadmin.card

docker run \
  --rm \
  --network composer_default \
  -v $(pwd)/vldstage:/home/composer/vldstage \
  -v $(pwd)/.vld-card-store:/home/composer/.composer \
  gmoney23/alpinecli:0.16.6 \
  card import -f /home/composer/vldstage/bnaadmin.card

# Submit the setup transaction.
docker run \
  --rm \
  --network composer_default \
  -v $(pwd)/.vld-card-store:/home/composer/.composer \
  gmoney23/alpinecli:0.16.6 \
  transaction submit -c admin@vehicle-lifecycle-network -d '{"$class": "org.acme.vehicle.lifecycle.SetupDemo"}'

# correct permissions so that node-red can read cardstore and node-sdk can write to client-data
docker exec \
  composer \
  find /home/composer/.composer -name "*" -exec chmod 777 {} \;

# Start the REST server.
docker run \
  -d \
  --network composer_default \
  --name rest \
  -v $(pwd)/.vld-card-store:/home/composer/.composer \
  -e COMPOSER_CARD=admin@vehicle-lifecycle-network \
  -e COMPOSER_NAMESPACES=required \
  -p 3000:3000 \
  gmoney23/alpinerest:0.16.6

# Wait for the REST server to start and initialize.
sleep 10

# Start Node-RED.
docker run \
  -d \
  --network composer_default \
  --name node-red \
  -v $(pwd)/.vld-card-store:/usr/src/node-red/.composer \
  -e COMPOSER_BASE_URL=http://rest:3000 \
  -v $(pwd)/flows.json:/data/flows.json \
  -p 1880:1880 \
  gmoney23/node-red-composer:0.10

# Wait for Node-RED to start and initialize.
sleep 10

# Start the DMV application.

docker run \
-d \
--network composer_default \
--name dmv \
-e COMPOSER_BASE_URL=http://rest:3000 \
-e NODE_RED_BASE_URL=ws://node-red:1880 \
-p 3001:6001 \
gmoney23/dmv

# Start the manufacturing application.

docker run \
-d \
--network composer_default \
--name manufacturing \
-e COMPOSER_BASE_URL=http://rest:3000 \
-e NODE_RED_BASE_URL=ws://node-red:1880 \
-p 3002:6001 \
gmoney23/manufacturing

# Start the car-builder application.

docker run \
-d \
--network composer_default \
--name car-builder \
-e COMPOSER_BASE_URL=http://rest:3000 \
-e NODE_RED_BASE_URL=ws://node-red:1880 \
-p 8081:8100 \
gmoney23/car-builder

#get my external (public ip address)
export ip="$(ifconfig | grep -v 'eth0:' | grep -A 1 'eth0' | tail -1 | cut -d ':' -f 2 | cut -d ' ' -f 1)"

# Make insurance work from my Linux One's specific ip address
cd $(pwd)/../../prince-insurance
sed -i "s/myip/$ip/g" package.json
cd  src/app/alert-sidebar
sed -i "s/myip/$ip/g" alert-sidebar.component.ts
cd ../overview
sed -i "s/myip/$ip/g" overview.component.ts
cd ../policy
sed -i "s/myip/$ip/g" policy.component.ts
cd ../popup
sed -i "s/myip/$ip/g" popup.component.ts
cd ../../..

# Start the insurance application
npm install
npm start > /dev/null 2>&1 &
# Wait for the applications to start and initialize.
sleep 10


# Wait for the applications to start and initialize.
sleep 10

# Copy and paste the following urls in a web browser opening a new tab for each
echo "For composer playground: $ip:8080"
echo "For composer rest-server: $ip:3000/explorer/"
echo "For node-red: $ip:1880"
echo "For dmv view: $ip:3001"
echo "For manufacturing view: $ip:3002"
echo "For car-builder view: $ip:8081"
echo "For insurance view: $ip:4200"

# Exit; this is required as the payload immediately follows.
exit 0
